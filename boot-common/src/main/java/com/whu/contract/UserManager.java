package com.whu.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class UserManager extends Contract {
    private static final String BINARY = "60806040819052600060608190526003805491819052915160ff191682556076907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b602060026001841615610100026000190190931692909204601f01919091048101905b8082111560e157600081556001016064565b5050604080516020808201928390526000918290526004805492819052925160ff1916835560e591601f6002600019610100600185161502019092169190910401047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b908101906064565b5090565b50506112c9806100f56000396000f3606060405236156100825760e060020a60003504630adcaddc81146100875780632fe99bdc1461009d5780633209c6de1461026d5780635e331e62146102c65780636833d54f146103715780636c4be3171461041a57806380599e4b1461058a578063b3d327431461063f578063b8522043146106ae578063ca34a0e31461071d575b610002565b346100025761072d60043560015481105b919050565b346100025761072d6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f8101839004830284018301909452838352979998604498929750919091019450909250829150840183828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897606497919650602491909101945090925082915084018382808284375094965050505050505060006000600060005060000160005085604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050908152602001604051809103902060005060000160005054905083600060005060000160005086604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108ed57805160ff19168380011785555b5061091d9291505b808211156109be5760008155600101610259565b34610002576107416000610e9d6000195b60010160005b600154821080156102b657506001805483908110156100025790600052602060002090600202016000506001015460ff165b1561126a57600190910190610284565b34610002576107536004356040805160208181018352600080835283518083018552818152845192830190945281526001805492939285908110156100025790600052602060002090600202016000508054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152929190830182828015610ece5780601f10610ea357610100808354040283529160200191610ece565b346100025761072d6004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050505050505060006000600060005060000160005083604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050908152602001604051809103902060005060000160005054119050610098565b346100025761087f6004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050505050505060206040519081016040528060008152602001506000600060005060000160005083604051808280519060200190808383829060006004602084601f0104600302600f01f1509050019150509081526020016040518091039020600050600001600050541015156110b157600060005060000160005082604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110f05780601f106110c5576101008083540402835291602001916110f0565b346100025761072d6004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050505050505060006000600060005060000160005083604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050908152602001604051809103902060005060000160005054905080600014156110fe57600091506111f1565b346100025760408051602080820183526000825260048054845160026001831615610100026000190190921691909104601f810184900484028201840190955284815261087f94909283018282801561125e5780601f106112335761010080835404028352916020019161125e565b346100025760408051602080820183526000825260038054845160026001831615610100026000190190921691909104601f810184900484028201840190955284815261087f94909283018282801561125e5780601f106112335761010080835404028352916020019161125e565b346100025761074160043561027e565b604080519115158252519081900360200190f35b60408051918252519081900360200190f35b604051808060200180602001806020018481038452878181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156107bb5780820380516001836020036101000a031916815260200191505b508481038352868181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156108145780820380516001836020036101000a031916815260200191505b508481038252858181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561086d5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156108df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b82800160010185558215610251579182015b828111156102515782518260005055916020019190600101906108ff565b505082600060005060000160005086604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506002016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109c257805160ff19168380011785555b506109f2929150610259565b5090565b828001600101855582156109b2579182015b828111156109b25782518260005055916020019190600101906109d4565b5050604080518082018252600180825260fa60020a600b02602080840191909152600380548551600294821615610100026000190190911693909304601f8101839004830284018301909552848352610a6f9488949392830182828015610af05780601f10610ac557610100808354040283529160200191610af0565b60036000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b9857805160ff19168380011785555b50610bc8929150610259565b820191906000526020600020905b815481529060010190602001808311610ad357829003601f168201915b5050505050610afe90929190565b602060405190810160405280600081526020015060006000600060006000865188518a510101604051805910610b315750595b908082528060200260200182016040528015610b48575b509550855060208901945060208801935060208701925060208601915060009050611271818301868b515b60005b602082106112aa578251845260209384019390920191601f1990910190610b76565b82800160010185558215610ab9579182015b82811115610ab9578251826000505591602001919060010190610baa565b5050604080518082018252600180825260fa60020a600b02602080840191909152600480548551600294821615610100026000190190911693909304601f8101839004830284018301909552848352610c459489949392830182828015610af05780601f10610ac557610100808354040283529160200191610af0565b60046000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c9b57805160ff19168380011785555b50610ccb929150610259565b82800160010185558215610c8f579182015b82811115610c8f578251826000505591602001919060010190610cad565b50506000811115610cdf5760019150610d25565b60018054808201808355909190828015829011610d2d57600202816002028360005260206000209182019101610d2d9190610e19565b5050600280546001019055600091505b509392505050565b5050509050805080600101600060005060000160005086604051808280519060200190808383829060006004602084601f0104600302600f01f1509050019150509081526020016040518091039020600050600001600050819055508460006000506001016000508281548110156100025790600052602060002090600202016000506000016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e6d57805160ff19168380011785555b50610d15929150610259565b505060018101805460ff191690556002015b808211156109be57600060008201600050805460018160011615610100020316600290046000825580601f10610e4f5750610e07565b601f016020900490600052602060002090810190610e079190610259565b82800160010185558215610dfb579182015b82811115610dfb578251826000505591602001919060010190610e7f565b90505b90565b820191906000526020600020905b815481529060010190602001808311610eb157829003601f168201915b505050505092508250600060005060000160005083604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fb85780601f10610f8d57610100808354040283529160200191610fb8565b820191906000526020600020905b815481529060010190602001808311610f9b57829003601f168201915b505050505091508150600060005060000160005083604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506002016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110a25780601f10611077576101008083540402835291602001916110a2565b820191906000526020600020905b81548152906001019060200180831161108557829003601f168201915b50939450505050509193909250565b505060408051602081019091526000815290565b820191906000526020600020905b8154815290600101906020018083116110d357829003601f168201915b505050505090508050610098565b600060005060000160005083604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000600082016000506000905560018201600050805460018160011615610100020316600290046000825580601f106111f757505b5060028201600050805460018160011615610100020316600290046000825580601f1061121557505b5050600180549091508190600019840190811015610002579060005260206000209060020201600050600101805460f860020a9283029290920460ff19909216919091179055600280546000190190555b50919050565b601f0160209004906000526020600020908101906111779190610259565b601f0160209004906000526020600020908101906111a09190610259565b820191906000526020600020905b81548152906001019060200180831161124157829003601f168201915b50505050509050610ea0565b5080610098565b8851810190508050611287818301858a51610b73565b875181019050805061129d818301848951610b73565b5093979650505050505050565b50905182516020929092036101000a600019018019909116911617905256";

    public static final String FUNC_ITERATE_VALID = "iterate_valid";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_ITERATE_START = "iterate_start";

    public static final String FUNC_ITERATE_GET = "iterate_get";

    public static final String FUNC_CONTAINS = "contains";

    public static final String FUNC_GETCONTRACTBYUSERNAME = "getContractByUsername";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_GETCONADDRESSLIST = "getConAddressList";

    public static final String FUNC_GETUSERLIST = "getUserList";

    public static final String FUNC_ITERATE_NEXT = "iterate_next";

    @Deprecated
    protected UserManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> iterate_valid(BigInteger keyIndex) {
        final Function function = new Function(
                FUNC_ITERATE_VALID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(keyIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> insert(String key, String value, String addr) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key), 
                new org.web3j.abi.datatypes.Utf8String(value), 
                new org.web3j.abi.datatypes.Utf8String(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> iterate_start() {
        final Function function = new Function(
                FUNC_ITERATE_START, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> iterate_get(BigInteger keyIndex) {
        final Function function = new Function(
                FUNC_ITERATE_GET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(keyIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> contains(String key) {
        final Function function = new Function(
                FUNC_CONTAINS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getContractByUsername(String key) {
        final Function function = new Function(FUNC_GETCONTRACTBYUSERNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> remove(String key) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getConAddressList() {
        final Function function = new Function(FUNC_GETCONADDRESSLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getUserList() {
        final Function function = new Function(FUNC_GETUSERLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> iterate_next(BigInteger keyIndex) {
        final Function function = new Function(
                FUNC_ITERATE_NEXT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(keyIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static UserManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
